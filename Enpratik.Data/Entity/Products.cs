//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Enpratik.Data
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.Data;
    using System.Data.Entity;
    using System.Linq;
    using System.Net;

    [Serializable]
    public partial class Products
    {

        public static Products initialize = new Products();        
        public Products()
        {
            //ParentId = 0;
            CreatedDate = DateTime.Now;
            IsActive = true;
        }

        public string getUrl() {
            EnPratik_DataHelper db = new EnPratik_DataHelper();
            var url = db.WebSiteUrls.Where(w => w.Id == UrlId).Select(w => w.Url).FirstOrDefault();
            return url;
        }
        
        public int Id { get; set; }
        //public int ParentId { get; set; }
        [Display(Name = "Ürün Adı")]
        [Required(ErrorMessage = "Ürün Adı Giriniz!")]
        public string ProductName { get; set; }
        public int UrlId { get; set; }
        [Display(Name = "Ürün Hakkında")]
        public string ShortDescription { get; set; }
        [Display(Name = "Ürün Açıklaması")]
        public string FullDescription { get; set; }
        [Display(Name = "Yönetici Yorumu")]
        public string AdminComment { get; set; }
        [Display(Name = "Marka")]
        public Nullable<int> BrandId { get; set; }
        [Display(Name = "Üretici Firma")]
        public Nullable<int> ManufacturerId { get; set; }
        [Display(Name = "İthalatçı Firma")]
        public Nullable<int> ImporterCompanyId { get; set; }
        [Display(Name = "Seo Anahtar Kelimeler")]
        public string MetaKeywords { get; set; }
        [Display(Name = "Seo Açıklama")]
        public string MetaDescription { get; set; }
        [Display(Name = "Seo Site Başlığı")]
        public string MetaTitle { get; set; }
        [Display(Name = "Müşteri Ürünü Yorumlar")]
        public Nullable<bool> AllowCustomerReviews { get; set; }
        [Display(Name = "Barkod")]
        public string Barcode { get; set; }
        [Display(Name = "Stok No")]
        public string StockNumber { get; set; }
        [Display(Name = "Hediye Paketi")]
        public Nullable<bool> IsGiftCard { get; set; }
        
        [Display(Name = "Eski Fiyat")]
        public Nullable<double> OldPrice { get; set; }
        
        [Display(Name = "Özel Fiyat")]
        public Nullable<double> SpecialPrice { get; set; }
        [Display(Name = "Özel Fiyat Başlangıç Tarihi")]
        public Nullable<System.DateTime> SpecialPriceStartDateTime { get; set; }
        [Display(Name = "Özel Fiyat Bitiş Tarihi")]
        public Nullable<System.DateTime> SpecialPriceEndDateTime { get; set; }

        
        [Display(Name = "Ürün Fiyatı")]
        public Nullable<double> Price { get; set; }
        
        [Display(Name = "Fiyat-1")]
        public Nullable<double> Price1 { get; set; }
        
        [Display(Name = "Fiyat-2")]
        public Nullable<double> Price2 { get; set; }
        
        [Display(Name = "Fiyat-3")]
        public Nullable<double> Price3 { get; set; }
        
        [Display(Name = "Fiyat-4")]
        public Nullable<double> Price4 { get; set; }
        
        [Display(Name = "Fiyat-5")]
        public Nullable<double> Price5 { get; set; }
        [Display(Name = "KDV")]
        public Nullable<int> Tax { get; set; }
        [Display(Name = "Ücretsiz Kargo")]
        public Nullable<bool> IsFreeShipping { get; set; }
        [Display(Name = "Vergiden Muaf")]
        public Nullable<bool> IsTaxExempt { get; set; }
        
        [Display(Name = "Havale İndirimi")]
        public Nullable<double> BankTransferDiscount { get; set; }
        [Display(Name = "Kredi Kartı Maksimum Taksit Sayısı")]
        public Nullable<int> NumberOfCreditCardMaxInstallment { get; set; }
        [Display(Name = "Para Birimi")]
        public Nullable<int> CurrencyId { get; set; }
        [Display(Name = "Satış Birimi")]
        public string SalesUnit { get; set; }
        [Display(Name = "Stok Miktarı")]
        public Nullable<int> StockQuantity { get; set; }
        [Display(Name = "Stok Durumunu Göster")]
        public Nullable<bool> DisplayStockAvailability { get; set; }
        [Display(Name = "Stok Miktarını Göster")]
        public Nullable<bool> DisplayStockQuantity { get; set; }
        [Display(Name = "Düşük Stok Miktarı")]
        public Nullable<int> MinStockQuantity { get; set; }
        [Display(Name = "Düşük Stok Bildir")]
        public Nullable<bool> NotifyAdminForQuantityBelow { get; set; }
        [Display(Name = "Min. Sipariş Adeti")]
        public Nullable<int> OrderMinimumQuantity { get; set; }
        [Display(Name = "Maks. Sipariş Adeti")]
        public Nullable<int> OrderMaximumQuantity { get; set; }
        [Display(Name = "İstekli Ürün")]
        public Nullable<bool> DisableWishlistButton { get; set; }
        [Display(Name = "Ön Sipariş Ürünü")]
        public Nullable<bool> AvailableForPreOrder { get; set; }
        [Display(Name = "Fiyat İçin Ara")]
        public Nullable<bool> CallForPrice { get; set; }
        [Display(Name = "Müşteri Fiyat Girebilir")]
        public Nullable<bool> CustomerEntersPrice { get; set; }
        
        [Display(Name = "Müş. Minimum Fiyat")]
        public Nullable<double> MinimumCustomerEnteredPrice { get; set; }
        
        [Display(Name = "Müş. Maks. Fiyat")]
        public Nullable<double> MaximumCustomerEnteredPrice { get; set; }


        [Display(Name = "Ağırlık")]
        public Nullable<double> Weight { get; set; }
        
        [Display(Name = "Uzunluk")]
        public Nullable<double> Length { get; set; }
        [Display(Name = "Genişlik")]
        public Nullable<double> Width { get; set; }
        
        [Display(Name = "Yükseklik")]
        public Nullable<double> Height { get; set; }
        [Display(Name = "Satış Başlangıç Tarihi")]
        public Nullable<System.DateTime> AvailableStartDateTime { get; set; }
        [Display(Name = "Satış Bitiş Tarihi")]
        public Nullable<System.DateTime> AvailableEndDateTime { get; set; }
        [Display(Name = "Vitrin Ürünü")]
        public Nullable<bool> IsShowCase { get; set; }
        [Display(Name = "Yeni Ürün")]
        public Nullable<bool> IsNewProduct { get; set; }
        [Display(Name = "İndirimli Ürün")]
        public Nullable<bool> IsDiscountProduct { get; set; }
        [Display(Name = "Beğenilen Ürün")]
        public Nullable<bool> IsLikeProduct { get; set; }
        [Display(Name = "Sınırlı Sayıda Ürün")]
        public Nullable<bool> IsLimitedStockProduct { get; set; }     
        [Display(Name = "Görüntüleme Sırası")]
        public Nullable<int> DisplayOrder { get; set; }
        [Display(Name = "Yayınla")]
        public Nullable<bool> Published { get; set; }
        [Display(Name = "Dil")]
        public int LanguageId { get; set; }
        [Display(Name = "Oluşturulma Tarihi")]
        public Nullable<System.DateTime> CreatedDate { get; set; }
        [Display(Name = "Oluşturan Kişi")]
        public Nullable<int> CreatedUserId { get; set; }
        [Display(Name = "Güncelleme Tarihi")]
        public Nullable<System.DateTime> UpdatedDate { get; set; }
        [Display(Name = "Güncelleyen Kişi")]
        public Nullable<int> UpdatedUserId { get; set; }
        public Nullable<System.DateTime> DeletedDate { get; set; }
        public Nullable<int> DeletedUserId { get; set; }
        [Display(Name = "Aktif mi")]
        public bool IsActive { get; set; }

        public ProductDTO GetProductDTO()
        {
            ProductDTO p = new ProductDTO();
            p.Id = Id;
          //  p.ParentId = ParentId;
            p.ProductName = ProductName;
            p.UrlId = UrlId;
            p.ProductUrl = ""; /// TODO -- Url eklenecek
            p.ShortDescription = ShortDescription;
            p.FullDescription = FullDescription;
            p.AdminComment = AdminComment;
            p.ImporterCompanyId = ImporterCompanyId;
            p.BrandId = BrandId;
            p.ManufacturerId = ManufacturerId;
            p.MetaKeywords = MetaKeywords;
            p.MetaDescription = MetaDescription;
            p.MetaTitle = MetaTitle;
            p.AllowCustomerReviews = AllowCustomerReviews;
            p.Barcode = Barcode;
            p.StockNumber = StockNumber;
            p.IsGiftCard = IsGiftCard;
            p.OldPrice = ToMoneySafeString(OldPrice);
            p.SpecialPrice = ToMoneySafeString(SpecialPrice);
            p.SpecialPriceStartDateTime = SpecialPriceStartDateTime;
            p.SpecialPriceEndDateTime = SpecialPriceEndDateTime;
            p.Price = ToMoneySafeString(Price);
            p.Price1 = ToMoneySafeString(Price1);
            p.Price2 = ToMoneySafeString(Price2);
            p.Price3 = ToMoneySafeString(Price3);
            p.Price4 = ToMoneySafeString(Price4);
            p.Price5 = ToMoneySafeString(Price5);
            p.Tax = Tax;
            p.IsFreeShipping = IsFreeShipping;
            p.IsTaxExempt = IsTaxExempt;
            p.BankTransferDiscount = ToMoneySafeString(BankTransferDiscount);
            p.NumberOfCreditCardMaxInstallment = NumberOfCreditCardMaxInstallment;
            p.CurrencyId = CurrencyId;
            p.SalesUnit = SalesUnit;
            p.StockQuantity = StockQuantity;
            p.DisplayStockAvailability = DisplayStockAvailability;
            p.DisplayStockQuantity = DisplayStockQuantity;
            p.MinStockQuantity = MinStockQuantity;
            p.NotifyAdminForQuantityBelow = NotifyAdminForQuantityBelow;
            p.OrderMinimumQuantity = OrderMinimumQuantity;
            p.OrderMaximumQuantity = OrderMaximumQuantity;
            p.DisableWishlistButton = DisableWishlistButton;
            p.AvailableForPreOrder = AvailableForPreOrder;
            p.CallForPrice = CallForPrice;
            p.CustomerEntersPrice = CustomerEntersPrice;
            p.MinimumCustomerEnteredPrice = ToMoneySafeString(MinimumCustomerEnteredPrice);
            p.MaximumCustomerEnteredPrice = ToMoneySafeString(MaximumCustomerEnteredPrice);
            p.Weight = ToMoneySafeString(Weight);
            p.Length = ToMoneySafeString(Length);
            p.Width = ToMoneySafeString(Width);
            p.Height = ToMoneySafeString(Height);
            p.AvailableStartDateTime = AvailableStartDateTime;
            p.AvailableEndDateTime = AvailableEndDateTime;
            p.IsShowCase = IsShowCase;
            p.IsNewProduct = IsNewProduct;
            p.IsDiscountProduct = IsDiscountProduct;
            p.IsLikeProduct = IsLikeProduct;
            p.IsLimitedStockProduct = IsLimitedStockProduct;
            p.DisplayOrder = DisplayOrder;
            p.Published = Published;
            p.LanguageId = LanguageId;
            p.CreatedDate = CreatedDate;
            p.CreatedUserId = CreatedUserId;
            p.UpdatedDate = UpdatedDate;
            p.UpdatedUserId = UpdatedUserId;
            p.DeletedDate = DeletedDate;
            p.DeletedUserId = DeletedUserId;
            p.IsActive = IsActive;

            return p;
        }

        private string ToMoneySafeString(object data)
        {
            if (data == null)
                return "";

            return data.ToString().Replace(",", ".");
        }


        public Products Copy(int id)
        {
            EnPratik_DataHelper db = new EnPratik_DataHelper();
            var product = db.Products.Where(p => p.Id == id).FirstOrDefault();

            return product;
        }

    }

    public partial class ProductDTO
    {

        public Products GetProduct() {
            Products p = new Products();
            p.Id = Id;
           // p.ParentId = ParentId;
            p.ProductName = ProductName;
            p.UrlId = UrlId;
            p.ShortDescription = ShortDescription;
            p.FullDescription = FullDescription;
            p.AdminComment = AdminComment;
            p.ImporterCompanyId = ImporterCompanyId;
            p.BrandId = BrandId;
            p.ManufacturerId = ManufacturerId;
            p.MetaKeywords = MetaKeywords;
            p.MetaDescription = MetaDescription;
            p.MetaTitle = MetaTitle;
            p.AllowCustomerReviews = AllowCustomerReviews;
            p.Barcode = Barcode;
            p.StockNumber = StockNumber;
            p.IsGiftCard = IsGiftCard;
            p.OldPrice = string.IsNullOrEmpty(OldPrice) ? 0 : Convert.ToDouble(OldPrice.Replace(".", ","));
            p.SpecialPrice = string.IsNullOrEmpty(SpecialPrice) ? 0 : Convert.ToDouble(SpecialPrice.Replace(".", ","));
            p.SpecialPriceStartDateTime = SpecialPriceStartDateTime;
            p.SpecialPriceEndDateTime = SpecialPriceEndDateTime;
            p.Price = string.IsNullOrEmpty(Price) ? 0 : Convert.ToDouble(Price.Replace(".",","));
            p.Price1 = string.IsNullOrEmpty(Price1) ? 0 : Convert.ToDouble(Price1.Replace(".", ","));
            p.Price2 = string.IsNullOrEmpty(Price2) ? 0 : Convert.ToDouble(Price2.Replace(".", ","));
            p.Price3 = string.IsNullOrEmpty(Price3) ? 0 : Convert.ToDouble(Price3.Replace(".", ","));
            p.Price4 = string.IsNullOrEmpty(Price4) ? 0 : Convert.ToDouble(Price4.Replace(".", ","));
            p.Price5 = string.IsNullOrEmpty(Price5) ? 0 : Convert.ToDouble(Price5.Replace(".", ","));
            p.Tax = Tax;
            p.IsFreeShipping = IsFreeShipping;
            p.IsTaxExempt = IsTaxExempt;
            p.BankTransferDiscount = string.IsNullOrEmpty(BankTransferDiscount) ? 0 : Convert.ToDouble(BankTransferDiscount.Replace(".", ","));
            p.NumberOfCreditCardMaxInstallment = NumberOfCreditCardMaxInstallment;
            p.CurrencyId = CurrencyId;
            p.SalesUnit = SalesUnit;
            p.StockQuantity = StockQuantity;
            p.DisplayStockAvailability = DisplayStockAvailability;
            p.DisplayStockQuantity = DisplayStockQuantity;
            p.MinStockQuantity = MinStockQuantity;
            p.NotifyAdminForQuantityBelow = NotifyAdminForQuantityBelow;
            p.OrderMinimumQuantity = OrderMinimumQuantity;
            p.OrderMaximumQuantity = OrderMaximumQuantity;
            p.DisableWishlistButton = DisableWishlistButton;
            p.AvailableForPreOrder = AvailableForPreOrder;
            p.CallForPrice = CallForPrice;
            p.CustomerEntersPrice = CustomerEntersPrice;
            p.MinimumCustomerEnteredPrice = string.IsNullOrEmpty(MinimumCustomerEnteredPrice) ? 0 : Convert.ToDouble(MinimumCustomerEnteredPrice.Replace(".", ","));
            p.MaximumCustomerEnteredPrice = string.IsNullOrEmpty(MaximumCustomerEnteredPrice) ? 0 : Convert.ToDouble(MaximumCustomerEnteredPrice.Replace(".", ","));
            p.Weight = string.IsNullOrEmpty(Weight) ? 0 : Convert.ToDouble(Weight.Replace(".", ","));
            p.Length = string.IsNullOrEmpty(Length) ? 0 : Convert.ToDouble(Length.Replace(".", ","));
            p.Width = string.IsNullOrEmpty(Width) ? 0 : Convert.ToDouble(Width.Replace(".", ","));
            p.Height = string.IsNullOrEmpty(Height) ? 0 : Convert.ToDouble(Height.Replace(".", ","));
            p.AvailableStartDateTime = AvailableStartDateTime;
            p.AvailableEndDateTime = AvailableEndDateTime;
            p.IsShowCase = IsShowCase;
            p.IsNewProduct = IsNewProduct;
            p.IsDiscountProduct = IsDiscountProduct;
            p.IsLikeProduct = IsLikeProduct;
            p.IsLimitedStockProduct = IsLimitedStockProduct;
            p.DisplayOrder = DisplayOrder;
            p.Published = Published;
            p.LanguageId = LanguageId;
            p.CreatedDate = CreatedDate;
            p.CreatedUserId = CreatedUserId;
            p.UpdatedDate = UpdatedDate;
            p.UpdatedUserId = UpdatedUserId;
            p.DeletedDate = DeletedDate;
            p.DeletedUserId = DeletedUserId;
            p.IsActive = IsActive;

            return p;
        }

        public static ProductDTO initialize = new ProductDTO();
        public ProductDTO()
        {
            CreatedDate = DateTime.Now;
            IsActive = true;
        }

        public int Id { get; set; }
        public int ParentId { get; set; }
        [Display(Name = "Ürün Adı")]
        [Required(ErrorMessage = "Ürün Adı Giriniz!")]
        public string ProductName { get; set; }
        public int UrlId { get; set; }
        public string ProductUrl { get; set; }
        [Display(Name = "Ürün Hakkında")]
        public string ShortDescription { get; set; }
        [Display(Name = "Ürün Açıklaması")]
        public string FullDescription { get; set; }
        [Display(Name = "Yönetici Yorumu")]
        public string AdminComment { get; set; }
        [Display(Name = "Marka")]
        public Nullable<int> BrandId { get; set; }
        [Display(Name = "Üretici Firma")]
        public Nullable<int> ManufacturerId { get; set; }
        [Display(Name = "İthalatçı Firma")]
        public Nullable<int> ImporterCompanyId { get; set; }
        [Display(Name = "Seo Anahtar Kelimeler")]
        public string MetaKeywords { get; set; }
        [Display(Name = "Seo Açıklama")]
        public string MetaDescription { get; set; }
        [Display(Name = "Seo Site Başlığı")]
        public string MetaTitle { get; set; }
        [Display(Name = "Müşteri Ürünü Yorumlar")]
        public Nullable<bool> AllowCustomerReviews { get; set; }
        [Display(Name = "Barkod")]
        public string Barcode { get; set; }
        [Display(Name = "Stok No")]
        public string StockNumber { get; set; }
        [Display(Name = "Hediye Paketi")]
        public Nullable<bool> IsGiftCard { get; set; }

        [Display(Name = "Eski Fiyat")]
        public string OldPrice { get; set; }

        [Display(Name = "Özel Fiyat")]
        public string SpecialPrice { get; set; }
        [Display(Name = "Özel Fiyat Başlangıç Tarihi")]
        public Nullable<System.DateTime> SpecialPriceStartDateTime { get; set; }
        [Display(Name = "Özel Fiyat Bitiş Tarihi")]
        public Nullable<System.DateTime> SpecialPriceEndDateTime { get; set; }

        [Display(Name = "Ürün Fiyatı")]
        public string Price { get; set; }

        [Display(Name = "Fiyat-1")]
        public string Price1 { get; set; }

        [Display(Name = "Fiyat-2")]
        public string Price2 { get; set; }

        [Display(Name = "Fiyat-3")]
        public string Price3 { get; set; }

        [Display(Name = "Fiyat-4")]
        public string Price4 { get; set; }

        [Display(Name = "Fiyat-5")]
        public string Price5 { get; set; }
        [Display(Name = "KDV")]
        public Nullable<int> Tax { get; set; }
        [Display(Name = "Ücretsiz Kargo")]
        public Nullable<bool> IsFreeShipping { get; set; }
        [Display(Name = "Vergiden Muaf")]
        public Nullable<bool> IsTaxExempt { get; set; }

        [Display(Name = "Havale İndirimi")]
        public string BankTransferDiscount { get; set; }
        [Display(Name = "Kredi Kartı Maksimum Taksit Sayısı")]
        public Nullable<int> NumberOfCreditCardMaxInstallment { get; set; }
        [Display(Name = "Para Birimi")]
        public Nullable<int> CurrencyId { get; set; }
        [Display(Name = "Satış Birimi")]
        public string SalesUnit { get; set; }
        [Display(Name = "Stok Miktarı")]
        public Nullable<int> StockQuantity { get; set; }
        [Display(Name = "Stok Durumunu Göster")]
        public Nullable<bool> DisplayStockAvailability { get; set; }
        [Display(Name = "Stok Miktarını Göster")]
        public Nullable<bool> DisplayStockQuantity { get; set; }
        [Display(Name = "Düşük Stok Miktarı")]
        public Nullable<int> MinStockQuantity { get; set; }
        [Display(Name = "Düşük Stok Bildir")]
        public Nullable<bool> NotifyAdminForQuantityBelow { get; set; }
        [Display(Name = "Min. Sipariş Adeti")]
        public Nullable<int> OrderMinimumQuantity { get; set; }
        [Display(Name = "Maks. Sipariş Adeti")]
        public Nullable<int> OrderMaximumQuantity { get; set; }
        [Display(Name = "İstekli Ürün")]
        public Nullable<bool> DisableWishlistButton { get; set; }
        [Display(Name = "Ön Sipariş Ürünü")]
        public Nullable<bool> AvailableForPreOrder { get; set; }
        [Display(Name = "Fiyat İçin Ara")]
        public Nullable<bool> CallForPrice { get; set; }
        [Display(Name = "Müşteri Fiyat Girebilir")]
        public Nullable<bool> CustomerEntersPrice { get; set; }

        [Display(Name = "Müş. Minimum Fiyat")]
        public string MinimumCustomerEnteredPrice { get; set; }

        [Display(Name = "Müş. Maks. Fiyat")]
        public string MaximumCustomerEnteredPrice { get; set; }

        [Display(Name = "Ağırlık")]
        public string Weight { get; set; }

        [Display(Name = "Uzunluk")]
        public string Length { get; set; }
        [Display(Name = "Genişlik")]
        public string Width { get; set; }

        [Display(Name = "Yükseklik")]
        public string Height { get; set; }
        [Display(Name = "Satış Başlangıç Tarihi")]
        public Nullable<System.DateTime> AvailableStartDateTime { get; set; }
        [Display(Name = "Satış Bitiş Tarihi")]
        public Nullable<System.DateTime> AvailableEndDateTime { get; set; }
        [Display(Name = "Vitrin Ürünü")]
        public Nullable<bool> IsShowCase { get; set; }
        [Display(Name = "Yeni Ürün")]
        public Nullable<bool> IsNewProduct { get; set; }
        [Display(Name = "İndirimli Ürün")]
        public Nullable<bool> IsDiscountProduct { get; set; }
        [Display(Name = "Beğenilen Ürün")]
        public Nullable<bool> IsLikeProduct { get; set; }
        [Display(Name = "Sınırlı Sayıda Ürün")]
        public Nullable<bool> IsLimitedStockProduct { get; set; }
        [Display(Name = "Görüntüleme Sırası")]
        public Nullable<int> DisplayOrder { get; set; }
        [Display(Name = "Yayınla")]
        public Nullable<bool> Published { get; set; }
        [Display(Name = "Dil")]
        public int LanguageId { get; set; }
        [Display(Name = "Oluşturulma Tarihi")]
        public Nullable<System.DateTime> CreatedDate { get; set; }
        [Display(Name = "Oluşturan Kişi")]
        public Nullable<int> CreatedUserId { get; set; }
        [Display(Name = "Güncelleme Tarihi")]
        public Nullable<System.DateTime> UpdatedDate { get; set; }
        [Display(Name = "Güncelleyen Kişi")]
        public Nullable<int> UpdatedUserId { get; set; }
        public Nullable<System.DateTime> DeletedDate { get; set; }
        public Nullable<int> DeletedUserId { get; set; }
        [Display(Name = "Aktif mi")]
        public bool IsActive { get; set; }

    }

    public class ProductVariant {
        public int ParentId { get; set; }
        public string ProductName{ get; set; }
        public int ProductId { get; set; }
        public int VariantAttributeId { get; set; }
        public List<ProductVariantAttributeValue> ProductVariantAttributeValueList { get; set; }

        public ProductVariant() {
            ProductVariantAttributeValueList = new List<ProductVariantAttributeValue>();
        }

    }

    public class ProductVariantAttributeValue {        
        public int VariantAttributeValueId { get; set; }
        public string VariantAttributeValue { get; set; }

    }
}
